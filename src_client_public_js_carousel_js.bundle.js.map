{"version":3,"file":"src_client_public_js_carousel_js.bundle.js","mappings":"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","sources":["webpack://myportfolio3/./src/client/public/js/carousel.js"],"sourcesContent":["const cardsContainer = document.querySelector(\".card-carousel\");\r\nconst cardsController = document.querySelector(\".card-carousel + .card-controller\")\r\n\r\nclass DraggingEvent {\r\n  constructor(target = undefined) {\r\n    this.target = target;\r\n  }\r\n  \r\n  event(callback) {\r\n    let handler;\r\n    \r\n    this.target.addEventListener(\"mousedown\", e => {\r\n      e.preventDefault()\r\n      \r\n      handler = callback(e)\r\n      \r\n      window.addEventListener(\"mousemove\", handler)\r\n      \r\n      document.addEventListener(\"mouseleave\", clearDraggingEvent)\r\n      \r\n      window.addEventListener(\"mouseup\", clearDraggingEvent)\r\n      \r\n      function clearDraggingEvent() {\r\n        window.removeEventListener(\"mousemove\", handler)\r\n        window.removeEventListener(\"mouseup\", clearDraggingEvent)\r\n      \r\n        document.removeEventListener(\"mouseleave\", clearDraggingEvent)\r\n        \r\n        handler(null);\r\n      }\r\n    });\r\n    \r\n    this.target.addEventListener(\"touchstart\", e => {\r\n      handler = callback(e)\r\n      \r\n      window.addEventListener(\"touchmove\", handler)\r\n      \r\n      window.addEventListener(\"touchend\", clearDraggingEvent)\r\n      \r\n      document.body.addEventListener(\"mouseleave\", clearDraggingEvent)\r\n      \r\n      function clearDraggingEvent() {\r\n        window.removeEventListener(\"touchmove\", handler)\r\n        window.removeEventListener(\"touchend\", clearDraggingEvent)\r\n        \r\n        handler(null)\r\n      }\r\n    })\r\n  }\r\n  \r\n  // Get the distance that the user has dragged\r\n  getDistance(callback) {\r\n    function distanceInit(e1) {\r\n      let startingX, startingY;\r\n      \r\n      if (\"touches\" in e1) {\r\n        startingX = e1.touches[0].clientX\r\n        startingY = e1.touches[0].clientY\r\n      } else {\r\n        startingX = e1.clientX\r\n        startingY = e1.clientY\r\n      }\r\n      \r\n\r\n      return function(e2) {\r\n        if (e2 === null) {\r\n          return callback(null)\r\n        } else {\r\n          \r\n          if (\"touches\" in e2) {\r\n            return callback({\r\n              x: e2.touches[0].clientX - startingX,\r\n              y: e2.touches[0].clientY - startingY\r\n            })\r\n          } else {\r\n            return callback({\r\n              x: e2.clientX - startingX,\r\n              y: e2.clientY - startingY\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    this.event(distanceInit)\r\n  }\r\n}\r\n\r\n\r\nclass CardCarousel extends DraggingEvent {\r\n  constructor(container, controller = undefined) {\r\n    super(container)\r\n    \r\n    // DOM elements\r\n    this.container = container\r\n    this.controllerElement = controller\r\n    this.cards = container.querySelectorAll(\".card\")\r\n    \r\n    // Carousel data\r\n    this.centerIndex = (this.cards.length - 1) / 2;\r\n    this.cardWidth = this.cards[0].offsetWidth / this.container.offsetWidth * 100\r\n    this.xScale = {};\r\n    \r\n    // Resizing\r\n    window.addEventListener(\"resize\", this.updateCardWidth.bind(this))\r\n    \r\n    if (this.controllerElement) {\r\n      this.controllerElement.addEventListener(\"keydown\", this.controller.bind(this))      \r\n    }\r\n\r\n    \r\n    // Initializers\r\n    this.build()\r\n    \r\n    // Bind dragging event\r\n    super.getDistance(this.moveCards.bind(this))\r\n  }\r\n  \r\n  updateCardWidth() {\r\n    this.cardWidth = this.cards[0].offsetWidth / this.container.offsetWidth * 100\r\n    \r\n    this.build()\r\n  }\r\n  \r\n  build(fix = 0) {\r\n    for (let i = 0; i < this.cards.length; i++) {\r\n      const x = i - this.centerIndex;\r\n      const scale = this.calcScale(x)\r\n      const scale2 = this.calcScale2(x)\r\n      const zIndex = -(Math.abs(i - this.centerIndex))\r\n      \r\n      const leftPos = this.calcPos(x, scale2)\r\n     \r\n      \r\n      this.xScale[x] = this.cards[i]\r\n      \r\n      this.updateCards(this.cards[i], {\r\n        x: x,\r\n        scale: scale,\r\n        leftPos: leftPos,\r\n        zIndex: zIndex\r\n      })\r\n    }\r\n  }\r\n  \r\n  \r\n  controller(e) {\r\n    const temp = {...this.xScale};\r\n      \r\n      if (e.keyCode === 39) {\r\n        // Left arrow\r\n        for (let x in this.xScale) {\r\n          const newX = (parseInt(x) - 1 < -this.centerIndex) ? this.centerIndex : parseInt(x) - 1;\r\n\r\n          temp[newX] = this.xScale[x]\r\n        }\r\n      }\r\n      \r\n      if (e.keyCode == 37) {\r\n        // Right arrow\r\n        for (let x in this.xScale) {\r\n          const newX = (parseInt(x) + 1 > this.centerIndex) ? -this.centerIndex : parseInt(x) + 1;\r\n\r\n          temp[newX] = this.xScale[x]\r\n        }\r\n      }\r\n      \r\n      this.xScale = temp;\r\n      \r\n      for (let x in temp) {\r\n        const scale = this.calcScale(x),\r\n              scale2 = this.calcScale2(x),\r\n              leftPos = this.calcPos(x, scale2),\r\n              zIndex = -Math.abs(x)\r\n\r\n        this.updateCards(this.xScale[x], {\r\n          x: x,\r\n          scale: scale,\r\n          leftPos: leftPos,\r\n          zIndex: zIndex\r\n        })\r\n      }\r\n  }\r\n  \r\n  calcPos(x, scale) {\r\n    let formula;\r\n    \r\n    if (x < 0) {\r\n      formula = (scale * 100 - this.cardWidth) / 2\r\n      \r\n      return formula\r\n\r\n    } else if (x > 0) {\r\n      formula = 100 - (scale * 100 + this.cardWidth) / 2\r\n      \r\n      return formula\r\n    } else {\r\n      formula = 100 - (scale * 100 + this.cardWidth) / 2\r\n      \r\n      return formula\r\n    }\r\n  }\r\n  \r\n  updateCards(card, data) {\r\n    if (data.x || data.x == 0) {\r\n      card.setAttribute(\"data-x\", data.x)\r\n    }\r\n    \r\n    if (data.scale || data.scale == 0) {\r\n      card.style.transform = `scale(${data.scale})`\r\n\r\n      if (data.scale == 0) {\r\n        card.style.opacity = data.scale\r\n      } else {\r\n        card.style.opacity = 1;\r\n      }\r\n    }\r\n   \r\n    if (data.leftPos) {\r\n      card.style.left = `${data.leftPos}%`        \r\n    }\r\n    \r\n    if (data.zIndex || data.zIndex == 0) {\r\n      if (data.zIndex == 0) {\r\n        card.classList.add(\"highlight\")\r\n      } else {\r\n        card.classList.remove(\"highlight\")\r\n      }\r\n      \r\n      card.style.zIndex = data.zIndex  \r\n    }\r\n  }\r\n  \r\n  calcScale2(x) {\r\n    let formula;\r\n   \r\n    if (x <= 0) {\r\n      formula = 1 - -1 / 5 * x\r\n      \r\n      return formula\r\n    } else if (x > 0) {\r\n      formula = 1 - 1 / 5 * x\r\n      \r\n      return formula\r\n    }\r\n  }\r\n  \r\n  calcScale(x) {\r\n    const formula = 1 - 1 / 5 * Math.pow(x, 2)\r\n    \r\n    if (formula <= 0) {\r\n      return 0 \r\n    } else {\r\n      return formula      \r\n    }\r\n  }\r\n  \r\n  checkOrdering(card, x, xDist) {    \r\n    const original = parseInt(card.dataset.x)\r\n    const rounded = Math.round(xDist)\r\n    let newX = x\r\n    \r\n    if (x !== x + rounded) {\r\n      if (x + rounded > original) {\r\n        if (x + rounded > this.centerIndex) {\r\n          \r\n          newX = ((x + rounded - 1) - this.centerIndex) - rounded + -this.centerIndex\r\n        }\r\n      } else if (x + rounded < original) {\r\n        if (x + rounded < -this.centerIndex) {\r\n          \r\n          newX = ((x + rounded + 1) + this.centerIndex) - rounded + this.centerIndex\r\n        }\r\n      }\r\n      \r\n      this.xScale[newX + rounded] = card;\r\n    }\r\n    \r\n    const temp = -Math.abs(newX + rounded)\r\n    \r\n    this.updateCards(card, {zIndex: temp})\r\n\r\n    return newX;\r\n  }\r\n  \r\n  moveCards(data) {\r\n    let xDist;\r\n    \r\n    if (data != null) {\r\n      this.container.classList.remove(\"smooth-return\")\r\n      xDist = data.x / 250;\r\n    } else {\r\n\r\n      \r\n      this.container.classList.add(\"smooth-return\")\r\n      xDist = 0;\r\n\r\n      for (let x in this.xScale) {\r\n        this.updateCards(this.xScale[x], {\r\n          x: x,\r\n          zIndex: Math.abs(Math.abs(x) - this.centerIndex)\r\n        })\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < this.cards.length; i++) {\r\n      const x = this.checkOrdering(this.cards[i], parseInt(this.cards[i].dataset.x), xDist),\r\n            scale = this.calcScale(x + xDist),\r\n            scale2 = this.calcScale2(x + xDist),\r\n            leftPos = this.calcPos(x + xDist, scale2)\r\n      \r\n      \r\n      this.updateCards(this.cards[i], {\r\n        scale: scale,\r\n        leftPos: leftPos\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nconst carousel = new CardCarousel(cardsContainer)"],"names":["cardsContainer","document","querySelector","constructor","target","this","event","callback","handler","addEventListener","e","clearDraggingEvent","window","removeEventListener","preventDefault","body","getDistance","e1","startingX","startingY","touches","clientX","clientY","e2","x","y","container","controller","super","controllerElement","cards","querySelectorAll","centerIndex","length","cardWidth","offsetWidth","xScale","updateCardWidth","bind","build","moveCards","fix","i","scale","calcScale","scale2","calcScale2","zIndex","Math","abs","leftPos","calcPos","updateCards","temp","keyCode","parseInt","formula","card","data","setAttribute","style","transform","opacity","left","classList","add","remove","pow","checkOrdering","xDist","original","dataset","rounded","round","newX"],"sourceRoot":""}